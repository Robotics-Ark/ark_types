
"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class base_state_t(object):

    __slots__ = ["position", "orientation", "linear_velocity", "angular_velocity"]

    __typenames__ = ["float", "float", "float", "float"]

    __dimensions__ = [[3], [4], [3], [3]]

    def __init__(self):
        self.position = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: float[3] """
        self.orientation = [ 0.0 for dim0 in range(4) ]
        """
        [x, y, z]
        LCM Type: float[4]
        """

        self.linear_velocity = [ 0.0 for dim0 in range(3) ]
        """
        [x, y, z, w]
        LCM Type: float[3]
        """

        self.angular_velocity = [ 0.0 for dim0 in range(3) ]
        """
        [v_x, v_y, v_z]
        LCM Type: float[3]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(base_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>3f', *self.position[:3]))
        buf.write(struct.pack('>4f', *self.orientation[:4]))
        buf.write(struct.pack('>3f', *self.linear_velocity[:3]))
        buf.write(struct.pack('>3f', *self.angular_velocity[:3]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != base_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return base_state_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = base_state_t()
        self.position = struct.unpack('>3f', buf.read(12))
        self.orientation = struct.unpack('>4f', buf.read(16))
        self.linear_velocity = struct.unpack('>3f', buf.read(12))
        self.angular_velocity = struct.unpack('>3f', buf.read(12))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if base_state_t in parents: return 0
        tmphash = (0x238f5a636daac97f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if base_state_t._packed_fingerprint is None:
            base_state_t._packed_fingerprint = struct.pack(">Q", base_state_t._get_hash_recursive([]))
        return base_state_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", base_state_t._get_packed_fingerprint())[0]

